services:
  backend:
    build:
      context: .  # Directory to build Docker image from.
      dockerfile: Dockerfile  # Dockerfile to use for building the image.
    ports:
      - "18080:8080"  # Maps port 8080 in the container to port 18080 on the host.
    depends_on:
      mysqldb:
        condition: service_healthy  # Waits for 'mysqldb' to be healthy before starting.
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysqldb:3306/segui-tus-compras?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=@milanesa
      - MERCADOLIBRE_API_MOST_RECENT_TOKEN=${MERCADOLIBRE_API_MOST_RECENT_TOKEN}
      - MERCADOLIBRE_API_CLIENT_ID=${MERCADOLIBRE_API_CLIENT_ID}
      - MERCADOLIBRE_API_CLIENT_SECRET=${MERCADOLIBRE_API_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - springboot-mysql-network
    volumes:
      - ./src/main/resources/application.properties:/app/application.properties

  mysqldb:
    image: mysql:8.0.39  # MySQL image version.
    ports:
      - "13306:3306"  # Maps port 3306 in the container to port 13306 on the host.
    command: --init-file /data/application/init.sql --innodb-lock-wait-timeout=50 --innodb-rollback-on-timeout=ON --transaction-isolation=READ-COMMITTED
    volumes:
      - mysql-data:/var/lib/mysql  # Persistent storage for MySQL data.
      - ./init.sql:/data/application/init.sql  # Initialization scripts.
    networks:
      - springboot-mysql-network  # Connects to the specified network.
    environment:
      MYSQL_ROOT_PASSWORD: "@milanesa"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p@milanesa" ]
      retries: 10  # Number of retries before considering the service unhealthy.
      interval: 3s  # Time between retries.
      timeout: 30s  # Timeout for each health check.

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "19090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - springboot-mysql-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "13000:3000"
    environment:
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/Segui Tus Compras-1751514930741.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - springboot-mysql-network
    depends_on:
      - prometheus

volumes:
  mysql-data:  # Named volume for MySQL data.
  prometheus-data:  # Named volume for Prometheus data.
  grafana-data:

networks:
  springboot-mysql-network:
    name: springboot-mysql-network  # Custom network for service communication.