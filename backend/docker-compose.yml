services:
  spring-dockerized-app:
    build:
      context: .  # Directory to build Docker image from.
      dockerfile: Dockerfile  # Dockerfile to use for building the image.
    ports:
      - 18080:8080  # Maps port 8080 in the container to port 18080 on the host.
    depends_on:
      mysqldb:
        condition: service_healthy  # Waits for 'mysqldb' to be healthy before starting.
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysqldb:3306/segui-tus-compras  # Database URL.
      - SPRING_DATASOURCE_USERNAME=root # Database username.
      - SPRING_DATASOURCE_PASSWORD=@milanesa  # Database password.
    networks:
      - springboot-mysql-network  # Connects to the specified network.
    volumes:
      - ./src/main/resources/application.properties:/app/application.properties  # Mounts properties file.

  mysqldb:
    image: mysql:8.0.39  # MySQL image version.
    ports:
      - 13306:3306  # Maps port 3306 in the container to port 13306 on the host.
    command: --init-file /data/application/init.sql
    volumes:
      - mysql-data:/var/lib/mysql  # Persistent storage for MySQL data.
      - ./init.sql:/data/application/init.sql  # Initialization scripts.
    networks:
      - springboot-mysql-network  # Connects to the specified network.
    environment:
      MYSQL_ROOT_PASSWORD: "@milanesa"  # Sets a random root password.
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p@milanesa" ]
      retries: 10  # Number of retries before considering the service unhealthy.
      interval: 3s  # Time between retries.
      timeout: 30s  # Timeout for each health check.

volumes:
  mysql-data:  # Named volume for MySQL data.

networks:
  springboot-mysql-network:
    name: springboot-mysql-network  # Custom network for service communication.